{"version":3,"sources":["actions/transactionActions.js","components/TransactionForm.js","components/TransactionList.js","App.js","serviceWorker.js","index.js","reducers/transactionReducer.js"],"names":["insertData","data","type","payload","updateData","deleteData","index","updateIndex","TransactionForm","state","returnStateObject","handleInputChange","e","setState","target","name","value","handleSubmit","preventDefault","props","currentIndex","insertTransaction","updateTransaction","this","username","email","notedate","textarea","list","prevProps","length","onSubmit","autoComplete","id","className","placeholder","onChange","required","row","Component","connect","dispatch","bindActionCreators","actions","TransactionList","handleEdit","updateTransactionIndex","handleDelete","deleteTransaction","Table","map","item","key","onClick","App","Boolean","window","location","hostname","match","localStorage","getItem","setItem","JSON","stringify","initialState","parse","store","createStore","action","push","splice","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cfbb369f.chunk.js","sourcesContent":["export const insertData = data => {\r\n    return {\r\n        type: 'INSERT',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const updateData = data => {\r\n    return {\r\n        type: 'UPDATE',\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const deleteData = index => {\r\n    return {\r\n        type: 'DELETE',\r\n        payload: index\r\n    }\r\n}\r\n\r\nexport const updateIndex = index => {\r\n    return {\r\n        type: 'UPDATE-INDEX',\r\n        payload: index\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../actions/transactionActions'\r\nimport { bindActionCreators } from 'redux'\r\n\r\nclass TransactionForm extends Component {\r\n    state = {\r\n        ...this.returnStateObject()\r\n    }\r\n\r\n    returnStateObject() {\r\n        if (this.props.currentIndex == -1)\r\n            return {\r\n                username: '',\r\n                email: '',\r\n                notedate: '',\r\n                textarea: ''\r\n            }\r\n        else\r\n            return this.props.list[this.props.currentIndex]\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.currentIndex != this.props.currentIndex || prevProps.list.length != this.props.list.length) {\r\n            this.setState({ ...this.returnStateObject() })\r\n        }\r\n\r\n    }\r\n\r\n    handleInputChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault()\r\n        if (this.props.currentIndex == -1)\r\n            this.props.insertTransaction(this.state)\r\n        else\r\n            this.props.updateTransaction(this.state)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Message Board</h1>\r\n                <br />\r\n                <form onSubmit={this.handleSubmit} autoComplete=\"off\" id=\"initialForm\">\r\n                    <input className=\"form-control\" name=\"username\" placeholder=\"Your name\"\r\n                        value={this.state.username}\r\n                        onChange={this.handleInputChange} required /><br />\r\n                    <input className=\"form-control\" name=\"email\" placeholder=\"Email address\"\r\n                        value={this.state.email}\r\n                        onChange={this.handleInputChange} /><br />\r\n                    <input type=\"date\" className=\"form-control\" name=\"notedate\"\r\n                        value={this.state.notedate}\r\n                        onChange={this.handleInputChange} /><br />\r\n                    <textarea className=\"form-control\" row=\"3\" name=\"textarea\"\r\n                        placeholder=\"Write down something you like\"\r\n                        value={this.state.textarea}\r\n                        onChange={this.handleInputChange} required /><br />\r\n                    <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\r\n                </form>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        list: state.list,\r\n        currentIndex: state.currentIndex\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators({\r\n        insertTransaction: actions.insertData,\r\n        updateTransaction: actions.updateData\r\n    }, dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionForm);","import React, { Component } from 'react'\r\nimport TransactionForm from './TransactionForm'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../actions/transactionActions'\r\nimport Table from 'react-bootstrap/Table'\r\nimport { bindActionCreators } from 'redux'\r\n\r\nclass TransactionList extends Component {\r\n\r\n    handleEdit = (index) => {\r\n        this.props.updateTransactionIndex(index)\r\n    }\r\n\r\n    handleDelete = index => {\r\n        this.props.deleteTransaction(index)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <TransactionForm />\r\n                <br />\r\n                <Table>\r\n                    <tbody>\r\n                        {\r\n                            this.props.list.map((item, index) => {\r\n                                return <tr key={index}>\r\n                                    <td>{item.username}</td>\r\n                                    <td>{item.email}</td>\r\n                                    <td>{item.notedate}</td>\r\n                                    <td>{item.textarea}</td>\r\n                                    <td><button className=\"btn btn-secondary btn-block\" onClick={() => this.handleEdit(index)}>Edit</button></td>\r\n                                    <td><button className=\"btn btn-secondary btn-block\" onClick={() => this.handleDelete(index)}>Delete</button></td>\r\n                                </tr>\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        list: state.list,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        updateTransactionIndex: actions.updateIndex,\r\n        deleteTransaction: actions.deleteData\r\n    }, dispatch)\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionList);","import React from 'react';\nimport './App.css';\nimport TransactionList from './components/TransactionList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <TransactionList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport { transactionReducer } from './reducers/transactionReducer'\n\nif (localStorage.getItem('transactions') == null)\n    localStorage.setItem('transactions', JSON.stringify([]))\n\nlet initialState = {\n    currentIndex: -1,\n    list: JSON.parse(localStorage.getItem('transactions'))\n}\n\nvar store = createStore(transactionReducer, initialState)\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const transactionReducer = (state, action) => {\r\n    var list = JSON.parse(localStorage.getItem('transactions'))\r\n\r\n    switch (action.type) {\r\n        case \"INSERT\":\r\n            list.push(action.payload)\r\n            localStorage.setItem('transactions', JSON.stringify(list))\r\n            return { list, currentIndex: -1 }\r\n\r\n        case \"UPDATE\":\r\n            list[state.currentIndex] = action.payload\r\n            localStorage.setItem('transactions', JSON.stringify(list))\r\n            return { list, currentIndex: -1 }\r\n\r\n        case \"DELETE\":\r\n            list.splice(action.payload, 1)\r\n            localStorage.setItem('transactions', JSON.stringify(list))\r\n            return { list, currentIndex: -1 }\r\n\r\n        case \"UPDATE-INDEX\":\r\n            return { list, currentIndex: action.payload }\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}"],"sourceRoot":""}